import {
  require_browser,
  require_warning
} from "./chunk-7MMI4UBB.js";
import {
  require_react_dom
} from "./chunk-55ZIPSOL.js";
import {
  __commonJS,
  require_react
} from "./chunk-REFQX4J5.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-input-mask-next/lib/react-input-mask.development.js
var require_react_input_mask_development = __commonJS({
  "node_modules/react-input-mask-next/lib/react-input-mask.development.js"(exports, module) {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React = require_react();
    var React__default = _interopDefault(React);
    var reactDom = require_react_dom();
    var PropTypes = _interopDefault(require_prop_types());
    var invariant = _interopDefault(require_browser());
    var warning = _interopDefault(require_warning());
    function _defaults2(obj, defaults) {
      var keys = Object.getOwnPropertyNames(defaults);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = Object.getOwnPropertyDescriptor(defaults, key);
        if (value && value.configurable && obj[key] === void 0) {
          Object.defineProperty(obj, key, value);
        }
      }
      return obj;
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        _defaults2(o2, p2);
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }
    function defer(fn) {
      return requestAnimationFrame(fn);
    }
    function cancelDefer(deferId) {
      cancelAnimationFrame(deferId);
    }
    function setInputSelection(input, start, end) {
      if (end === void 0) {
        end = start;
      }
      input.setSelectionRange(start, end);
    }
    function getInputSelection(input) {
      var start = input.selectionStart;
      var end = input.selectionEnd;
      return {
        start,
        end,
        length: end - start
      };
    }
    function isInputFocused(input) {
      var inputDocument = input.ownerDocument;
      return inputDocument.hasFocus() && inputDocument.activeElement === input;
    }
    function getElementDocument(element) {
      return element == null ? void 0 : element.ownerDocument;
    }
    function getElementWindow(element) {
      var _getElementDocument;
      return (_getElementDocument = getElementDocument(element)) == null ? void 0 : _getElementDocument.defaultView;
    }
    function isDOMElement(element) {
      var elementWindow = getElementWindow(element);
      return !!elementWindow && element instanceof elementWindow.HTMLElement;
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function findLastIndex(array, predicate) {
      for (var i = array.length - 1; i >= 0; i--) {
        var x = array[i];
        if (predicate(x, i)) {
          return i;
        }
      }
      return -1;
    }
    function repeat(string, n) {
      if (n === void 0) {
        n = 1;
      }
      var result = "";
      for (var i = 0; i < n; i++) {
        result += string;
      }
      return result;
    }
    function toString(value) {
      return "" + value;
    }
    function useInputElement(inputRef) {
      return React.useCallback(function() {
        var input = inputRef.current;
        var isDOMNode = typeof window !== "undefined" && isDOMElement(input);
        if (!input || !isDOMNode) {
          return null;
        }
        if (input.nodeName !== "INPUT") {
          input = input.querySelector("input");
        }
        if (!input) {
          throw new Error("react-input-mask: inputComponent doesn't contain input node");
        }
        return input;
      }, [inputRef]);
    }
    function useDeferLoop(callback) {
      var deferIdRef = React.useRef(null);
      var runLoop = React.useCallback(function() {
        if (deferIdRef.current !== null) {
          return;
        }
        function loop() {
          callback();
          deferIdRef.current = defer(loop);
        }
        loop();
      }, [callback]);
      var stopLoop = React.useCallback(function() {
        cancelDefer(deferIdRef.current);
        deferIdRef.current = null;
      }, []);
      React.useEffect(function() {
        if (deferIdRef.current) {
          stopLoop();
          runLoop();
        }
      }, [runLoop, stopLoop]);
      React.useEffect(cancelDefer, []);
      return [runLoop, stopLoop];
    }
    function useSelection(inputRef, isMasked) {
      var selectionRef = React.useRef({
        start: null,
        end: null
      });
      var getInputElement = useInputElement(inputRef);
      var getSelection = React.useCallback(function() {
        var input = getInputElement();
        return getInputSelection(input);
      }, [getInputElement]);
      var getLastSelection = React.useCallback(function() {
        return selectionRef.current;
      }, []);
      var setSelection = React.useCallback(function(selection) {
        var input = getInputElement();
        if (!input || !isInputFocused(input)) {
          return;
        }
        setInputSelection(input, selection.start, selection.end);
        selectionRef.current = getSelection();
      }, [getInputElement, getSelection]);
      var selectionLoop = React.useCallback(function() {
        selectionRef.current = getSelection();
      }, [getSelection]);
      var _useDeferLoop = useDeferLoop(selectionLoop), runSelectionLoop = _useDeferLoop[0], stopSelectionLoop = _useDeferLoop[1];
      React.useLayoutEffect(function() {
        if (!isMasked) {
          return;
        }
        var input = getInputElement();
        input.addEventListener("focus", runSelectionLoop);
        input.addEventListener("blur", stopSelectionLoop);
        if (isInputFocused(input)) {
          runSelectionLoop();
        }
        return function() {
          input.removeEventListener("focus", runSelectionLoop);
          input.removeEventListener("blur", stopSelectionLoop);
          stopSelectionLoop();
        };
      });
      return {
        getSelection,
        getLastSelection,
        setSelection
      };
    }
    function useValue(inputRef, initialValue) {
      var getInputElement = useInputElement(inputRef);
      var valueRef = React.useRef(initialValue);
      var getValue = React.useCallback(function() {
        var input = getInputElement();
        return input.value;
      }, [getInputElement]);
      var getLastValue = React.useCallback(function() {
        return valueRef.current;
      }, []);
      var setValue = React.useCallback(function(newValue) {
        valueRef.current = newValue;
        var input = getInputElement();
        if (input) {
          input.value = newValue;
        }
      }, [getInputElement]);
      return {
        getValue,
        getLastValue,
        setValue
      };
    }
    function useInputState(initialValue, isMasked) {
      var inputRef = React.useRef();
      var _useSelection = useSelection(inputRef, isMasked), getSelection = _useSelection.getSelection, getLastSelection = _useSelection.getLastSelection, setSelection = _useSelection.setSelection;
      var _useValue = useValue(inputRef, initialValue), getValue = _useValue.getValue, getLastValue = _useValue.getLastValue, setValue = _useValue.setValue;
      function getLastInputState() {
        return {
          value: getLastValue(),
          selection: getLastSelection()
        };
      }
      function getInputState() {
        return {
          value: getValue(),
          selection: getSelection()
        };
      }
      function setInputState(_ref) {
        var value = _ref.value, selection = _ref.selection;
        setValue(value);
        setSelection(selection);
      }
      return {
        inputRef,
        getInputState,
        getLastInputState,
        setInputState
      };
    }
    function usePrevious(value) {
      var ref = React.useRef();
      React.useEffect(function() {
        ref.current = value;
      });
      return ref.current;
    }
    var CONTROLLED_PROPS = ["disabled", "onBlur", "onChange", "onFocus", "onMouseDown", "readOnly", "value"];
    var defaultFormatChars = {
      "9": /[0-9]/,
      a: /[A-Za-z]/,
      "*": /[A-Za-z0-9]/
    };
    function validateMaxLength(props) {
      true ? warning(!props.maxLength || !props.mask, "react-input-mask: maxLength property shouldn't be passed to the masked input. It breaks masking and unnecessary because length is limited by the mask length.") : void 0;
    }
    function validateMaskPlaceholder(props) {
      var mask = props.mask, maskPlaceholder = props.maskPlaceholder;
      !(!mask || !maskPlaceholder || maskPlaceholder.length === 1 || maskPlaceholder.length === mask.length) ? true ? invariant(false, "react-input-mask: maskPlaceholder should either be a single character or have the same length as the mask:\n" + ("mask: " + mask + "\n") + ("maskPlaceholder: " + maskPlaceholder)) : invariant(false) : void 0;
    }
    function validateChildren(props, inputElement) {
      var conflictProps = CONTROLLED_PROPS.filter(function(propId) {
        return inputElement.props[propId] != null && inputElement.props[propId] !== props[propId];
      });
      !!conflictProps.length ? true ? invariant(false, "react-input-mask: the following props should be passed to the InputMask component, not to children: " + conflictProps.join(",")) : invariant(false) : void 0;
    }
    function parseMask(_ref) {
      var mask = _ref.mask, maskPlaceholder = _ref.maskPlaceholder;
      var permanents = [];
      if (!mask) {
        return {
          maskPlaceholder: null,
          mask: null,
          prefix: null,
          lastEditablePosition: null,
          permanents: []
        };
      }
      if (typeof mask === "string") {
        var isPermanent = false;
        var parsedMaskString = "";
        mask.split("").forEach(function(character) {
          if (!isPermanent && character === "\\") {
            isPermanent = true;
          } else {
            if (isPermanent || !defaultFormatChars[character]) {
              permanents.push(parsedMaskString.length);
            }
            parsedMaskString += character;
            isPermanent = false;
          }
        });
        mask = parsedMaskString.split("").map(function(character, index) {
          if (permanents.indexOf(index) === -1) {
            return defaultFormatChars[character];
          }
          return character;
        });
      } else {
        mask.forEach(function(character, index) {
          if (typeof character === "string") {
            permanents.push(index);
          }
        });
      }
      if (maskPlaceholder) {
        if (maskPlaceholder.length === 1) {
          maskPlaceholder = mask.map(function(character, index) {
            if (permanents.indexOf(index) !== -1) {
              return character;
            }
            return maskPlaceholder;
          });
        } else {
          maskPlaceholder = maskPlaceholder.split("");
        }
        permanents.forEach(function(position) {
          maskPlaceholder[position] = mask[position];
        });
        maskPlaceholder = maskPlaceholder.join("");
      }
      var prefix = permanents.filter(function(position, index) {
        return position === index;
      }).map(function(position) {
        return mask[position];
      }).join("");
      var lastEditablePosition = mask.length - 1;
      while (permanents.indexOf(lastEditablePosition) !== -1) {
        lastEditablePosition--;
      }
      return {
        maskPlaceholder,
        prefix,
        mask,
        lastEditablePosition,
        permanents
      };
    }
    var MaskUtils = function MaskUtils2(options) {
      var _this = this;
      this.isCharacterAllowedAtPosition = function(character, position) {
        var maskPlaceholder = _this.maskOptions.maskPlaceholder;
        if (_this.isCharacterFillingPosition(character, position)) {
          return true;
        }
        if (!maskPlaceholder) {
          return false;
        }
        return maskPlaceholder[position] === character;
      };
      this.isCharacterFillingPosition = function(character, position) {
        var mask = _this.maskOptions.mask;
        if (!character || position >= mask.length) {
          return false;
        }
        if (!_this.isPositionEditable(position)) {
          return mask[position] === character;
        }
        var charRule = mask[position];
        return new RegExp(charRule).test(character);
      };
      this.isPositionEditable = function(position) {
        var _this$maskOptions = _this.maskOptions, mask = _this$maskOptions.mask, permanents = _this$maskOptions.permanents;
        return position < mask.length && permanents.indexOf(position) === -1;
      };
      this.isValueEmpty = function(value) {
        return value.split("").every(function(character, position) {
          return !_this.isPositionEditable(position) || !_this.isCharacterFillingPosition(character, position);
        });
      };
      this.isValueFilled = function(value) {
        return _this.getFilledLength(value) === _this.maskOptions.lastEditablePosition + 1;
      };
      this.getDefaultSelectionForValue = function(value) {
        var filledLength = _this.getFilledLength(value);
        var cursorPosition = _this.getRightEditablePosition(filledLength);
        return {
          start: cursorPosition,
          end: cursorPosition
        };
      };
      this.getFilledLength = function(value) {
        var characters = value.split("");
        var lastFilledIndex = findLastIndex(characters, function(character, position) {
          return _this.isPositionEditable(position) && _this.isCharacterFillingPosition(character, position);
        });
        return lastFilledIndex + 1;
      };
      this.getStringFillingLengthAtPosition = function(string, position) {
        var characters = string.split("");
        var insertedValue = characters.reduce(function(value, character) {
          return _this.insertCharacterAtPosition(value, character, value.length);
        }, repeat(" ", position));
        return insertedValue.length - position;
      };
      this.getLeftEditablePosition = function(position) {
        for (var i = position; i >= 0; i--) {
          if (_this.isPositionEditable(i)) {
            return i;
          }
        }
        return null;
      };
      this.getRightEditablePosition = function(position) {
        var mask = _this.maskOptions.mask;
        for (var i = position; i < mask.length; i++) {
          if (_this.isPositionEditable(i)) {
            return i;
          }
        }
        return null;
      };
      this.formatValue = function(value) {
        var _this$maskOptions2 = _this.maskOptions, maskPlaceholder = _this$maskOptions2.maskPlaceholder, mask = _this$maskOptions2.mask;
        if (!maskPlaceholder) {
          value = _this.insertStringAtPosition("", value, 0);
          while (value.length < mask.length && !_this.isPositionEditable(value.length)) {
            value += mask[value.length];
          }
          return value;
        }
        return _this.insertStringAtPosition(maskPlaceholder, value, 0);
      };
      this.clearRange = function(value, start, len) {
        if (!len) {
          return value;
        }
        var end = start + len;
        var _this$maskOptions3 = _this.maskOptions, maskPlaceholder = _this$maskOptions3.maskPlaceholder, mask = _this$maskOptions3.mask;
        var clearedValue = value.split("").map(function(character, i) {
          var isEditable = _this.isPositionEditable(i);
          if (!maskPlaceholder && i >= end && !isEditable) {
            return "";
          }
          if (i < start || i >= end) {
            return character;
          }
          if (!isEditable) {
            return mask[i];
          }
          if (maskPlaceholder) {
            return maskPlaceholder[i];
          }
          return "";
        }).join("");
        return _this.formatValue(clearedValue);
      };
      this.insertCharacterAtPosition = function(value, character, position) {
        var _this$maskOptions4 = _this.maskOptions, mask = _this$maskOptions4.mask, maskPlaceholder = _this$maskOptions4.maskPlaceholder;
        if (position >= mask.length) {
          return value;
        }
        var isAllowed = _this.isCharacterAllowedAtPosition(character, position);
        var isEditable = _this.isPositionEditable(position);
        var nextEditablePosition = _this.getRightEditablePosition(position);
        var isNextPlaceholder = maskPlaceholder && nextEditablePosition ? character === maskPlaceholder[nextEditablePosition] : null;
        var valueBefore = value.slice(0, position);
        if (isAllowed || !isEditable) {
          var insertedCharacter = isAllowed ? character : mask[position];
          value = valueBefore + insertedCharacter;
        }
        if (!isAllowed && !isEditable && !isNextPlaceholder) {
          value = _this.insertCharacterAtPosition(value, character, position + 1);
        }
        return value;
      };
      this.insertStringAtPosition = function(value, string, position) {
        var _this$maskOptions5 = _this.maskOptions, mask = _this$maskOptions5.mask, maskPlaceholder = _this$maskOptions5.maskPlaceholder;
        if (!string || position >= mask.length) {
          return value;
        }
        var characters = string.split("");
        var isFixedLength = _this.isValueFilled(value) || !!maskPlaceholder;
        var valueAfter = value.slice(position);
        value = characters.reduce(function(value2, character) {
          return _this.insertCharacterAtPosition(value2, character, value2.length);
        }, value.slice(0, position));
        if (isFixedLength) {
          value += valueAfter.slice(value.length - position);
        } else if (_this.isValueFilled(value)) {
          value += mask.slice(value.length).join("");
        } else {
          var editableCharactersAfter = valueAfter.split("").filter(function(character, i) {
            return _this.isPositionEditable(position + i);
          });
          value = editableCharactersAfter.reduce(function(value2, character) {
            var nextEditablePosition = _this.getRightEditablePosition(value2.length);
            if (nextEditablePosition === null) {
              return value2;
            }
            if (!_this.isPositionEditable(value2.length)) {
              value2 += mask.slice(value2.length, nextEditablePosition).join("");
            }
            return _this.insertCharacterAtPosition(value2, character, value2.length);
          }, value);
        }
        return value;
      };
      this.processChange = function(currentState, previousState) {
        var _this$maskOptions6 = _this.maskOptions, mask = _this$maskOptions6.mask, prefix = _this$maskOptions6.prefix, lastEditablePosition = _this$maskOptions6.lastEditablePosition;
        var value = currentState.value, selection = currentState.selection;
        var previousValue = previousState.value;
        var previousSelection = previousState.selection;
        var newValue = value;
        var enteredString = "";
        var formattedEnteredStringLength = 0;
        var removedLength = 0;
        var cursorPosition = Math.min(previousSelection.start, selection.start);
        if (selection.end > previousSelection.start) {
          enteredString = newValue.slice(previousSelection.start, selection.end);
          formattedEnteredStringLength = _this.getStringFillingLengthAtPosition(enteredString, cursorPosition);
          if (!formattedEnteredStringLength) {
            removedLength = 0;
          } else {
            removedLength = previousSelection.length;
          }
        } else if (newValue.length < previousValue.length) {
          removedLength = previousValue.length - newValue.length;
        }
        newValue = previousValue;
        if (removedLength) {
          if (removedLength === 1 && !previousSelection.length) {
            var deleteFromRight = previousSelection.start === selection.start;
            cursorPosition = deleteFromRight ? _this.getRightEditablePosition(selection.start) : _this.getLeftEditablePosition(selection.start);
          }
          newValue = _this.clearRange(newValue, cursorPosition, removedLength);
        }
        newValue = _this.insertStringAtPosition(newValue, enteredString, cursorPosition);
        cursorPosition += formattedEnteredStringLength;
        if (cursorPosition >= mask.length) {
          cursorPosition = mask.length;
        } else if (cursorPosition < prefix.length && !formattedEnteredStringLength) {
          cursorPosition = prefix.length;
        } else if (cursorPosition >= prefix.length && cursorPosition < lastEditablePosition && formattedEnteredStringLength) {
          cursorPosition = _this.getRightEditablePosition(cursorPosition);
        }
        newValue = _this.formatValue(newValue);
        return {
          value: newValue,
          enteredString,
          selection: {
            start: cursorPosition,
            end: cursorPosition
          }
        };
      };
      this.maskOptions = parseMask(options);
    };
    var _excluded = ["children"];
    var InputMaskChildrenWrapper = function(_React$Component) {
      _inheritsLoose(InputMaskChildrenWrapper2, _React$Component);
      function InputMaskChildrenWrapper2() {
        return _React$Component.apply(this, arguments) || this;
      }
      var _proto = InputMaskChildrenWrapper2.prototype;
      _proto.render = function render() {
        var _this$props = this.props, children = _this$props.children, props = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return React__default.cloneElement(children, props);
      };
      return InputMaskChildrenWrapper2;
    }(React__default.Component);
    var _excluded$1 = ["alwaysShowMask", "children", "mask", "maskPlaceholder", "beforeMaskedStateChange"];
    var InputMask = React.forwardRef(function InputMask2(props, forwardedRef) {
      var alwaysShowMask = props.alwaysShowMask, children = props.children, mask = props.mask, maskPlaceholder = props.maskPlaceholder, beforeMaskedStateChange = props.beforeMaskedStateChange, restProps = _objectWithoutPropertiesLoose(props, _excluded$1);
      validateMaxLength(props);
      validateMaskPlaceholder(props);
      var maskUtils = new MaskUtils({
        mask,
        maskPlaceholder
      });
      var isMasked = !!mask;
      var isEditable = !restProps.disabled && !restProps.readOnly;
      var isControlled = props.value !== null && props.value !== void 0;
      var previousIsMasked = usePrevious(isMasked);
      var initialValue = toString((isControlled ? props.value : props.defaultValue) || "");
      var _useInputState = useInputState(initialValue, isMasked), inputRef = _useInputState.inputRef, getInputState = _useInputState.getInputState, setInputState = _useInputState.setInputState, getLastInputState = _useInputState.getLastInputState;
      var getInputElement = useInputElement(inputRef);
      function onChange(event) {
        var currentState = getInputState();
        var previousState = getLastInputState();
        var newInputState = maskUtils.processChange(currentState, previousState);
        if (beforeMaskedStateChange) {
          newInputState = beforeMaskedStateChange({
            currentState,
            previousState,
            nextState: newInputState
          });
        }
        setInputState(newInputState);
        if (props.onChange) {
          props.onChange(event);
        }
      }
      function onFocus(event) {
        inputRef.current = event.target;
        var currentValue = getInputState().value;
        if (isMasked && !maskUtils.isValueFilled(currentValue)) {
          var newValue2 = maskUtils.formatValue(currentValue);
          var newSelection = maskUtils.getDefaultSelectionForValue(newValue2);
          var newInputState = {
            value: newValue2,
            selection: newSelection
          };
          if (beforeMaskedStateChange) {
            newInputState = beforeMaskedStateChange({
              currentState: getInputState(),
              nextState: newInputState
            });
            newValue2 = newInputState.value;
            newSelection = newInputState.selection;
          }
          setInputState(newInputState);
          if (newValue2 !== currentValue && props.onChange) {
            props.onChange(event);
          }
          defer(function() {
            setInputState(getLastInputState());
          });
        }
        if (props.onFocus) {
          props.onFocus(event);
        }
      }
      function onBlur(event) {
        var currentValue = getInputState().value;
        var lastValue2 = getLastInputState().value;
        if (isMasked && !alwaysShowMask && maskUtils.isValueEmpty(lastValue2)) {
          var newValue2 = "";
          var newInputState = {
            value: newValue2,
            selection: {
              start: null,
              end: null
            }
          };
          if (beforeMaskedStateChange) {
            newInputState = beforeMaskedStateChange({
              currentState: getInputState(),
              nextState: newInputState
            });
            newValue2 = newInputState.value;
          }
          setInputState(newInputState);
          if (newValue2 !== currentValue && props.onChange) {
            props.onChange(event);
          }
        }
        if (props.onBlur) {
          props.onBlur(event);
        }
      }
      function onMouseDown(event) {
        var input2 = getInputElement();
        var _getInputState = getInputState(), value = _getInputState.value;
        var inputDocument = getElementDocument(input2);
        if (!isInputFocused(input2) && !maskUtils.isValueFilled(value)) {
          var mouseDownX = event.clientX;
          var mouseDownY = event.clientY;
          var mouseDownTime = (/* @__PURE__ */ new Date()).getTime();
          var mouseUpHandler = function mouseUpHandler2(mouseUpEvent) {
            inputDocument.removeEventListener("mouseup", mouseUpHandler2);
            if (!isInputFocused(input2)) {
              return;
            }
            var deltaX = Math.abs(mouseUpEvent.clientX - mouseDownX);
            var deltaY = Math.abs(mouseUpEvent.clientY - mouseDownY);
            var axisDelta = Math.max(deltaX, deltaY);
            var timeDelta = (/* @__PURE__ */ new Date()).getTime() - mouseDownTime;
            if (axisDelta <= 10 && timeDelta <= 200 || axisDelta <= 5 && timeDelta <= 300) {
              var _lastState = getLastInputState();
              var newSelection = maskUtils.getDefaultSelectionForValue(_lastState.value);
              var newState = _extends({}, _lastState, {
                selection: newSelection
              });
              setInputState(newState);
            }
          };
          inputDocument.addEventListener("mouseup", mouseUpHandler);
        }
        if (props.onMouseDown) {
          props.onMouseDown(event);
        }
      }
      if (isMasked && isControlled) {
        var input = getInputElement();
        var isFocused = input && isInputFocused(input);
        var newValue = isFocused || alwaysShowMask || props.value ? maskUtils.formatValue(props.value) : props.value;
        if (beforeMaskedStateChange) {
          newValue = beforeMaskedStateChange({
            nextState: {
              value: newValue,
              selection: {
                start: null,
                end: null
              }
            }
          }).value;
        }
        setInputState(_extends({}, getLastInputState(), {
          value: newValue
        }));
      }
      var lastState = getLastInputState();
      var lastSelection = lastState.selection;
      var lastValue = lastState.value;
      React.useLayoutEffect(function() {
        if (!isMasked) {
          return;
        }
        var input2 = getInputElement();
        var isFocused2 = isInputFocused(input2);
        var previousSelection = lastSelection;
        var currentState = getInputState();
        var newInputState = _extends({}, currentState);
        if (!isControlled) {
          var currentValue = currentState.value;
          var formattedValue = maskUtils.formatValue(currentValue);
          var isValueEmpty = maskUtils.isValueEmpty(formattedValue);
          var shouldFormatValue = !isValueEmpty || isFocused2 || alwaysShowMask;
          if (shouldFormatValue) {
            newInputState.value = formattedValue;
          } else if (isValueEmpty && !isFocused2) {
            newInputState.value = "";
          }
        }
        if (isFocused2 && !previousIsMasked) {
          newInputState.selection = maskUtils.getDefaultSelectionForValue(newInputState.value);
        } else if (isControlled && isFocused2 && previousSelection) {
          if (previousSelection.start !== null && previousSelection.end !== null) {
            newInputState.selection = previousSelection;
          }
        }
        if (beforeMaskedStateChange) {
          newInputState = beforeMaskedStateChange({
            currentState,
            nextState: newInputState
          });
        }
        setInputState(newInputState);
      });
      var inputProps = _extends({}, restProps, {
        onFocus,
        onBlur,
        onChange: isMasked && isEditable ? onChange : props.onChange,
        onMouseDown: isMasked && isEditable ? onMouseDown : props.onMouseDown,
        ref: function ref(_ref) {
          inputRef.current = reactDom.findDOMNode(_ref);
          if (isFunction(forwardedRef)) {
            forwardedRef(_ref);
          } else if (forwardedRef !== null && typeof forwardedRef === "object") {
            forwardedRef.current = _ref;
          }
        },
        value: isMasked && isControlled ? lastValue : props.value
      });
      if (children) {
        validateChildren(props, children);
        return React__default.createElement(InputMaskChildrenWrapper, inputProps, children);
      }
      return React__default.createElement("input", inputProps);
    });
    InputMask.defaultProps = {
      alwaysShowMask: false,
      maskPlaceholder: "_"
    };
    InputMask.propTypes = {
      alwaysShowMask: PropTypes.bool,
      beforeMaskedStateChange: PropTypes.func,
      children: PropTypes.element,
      mask: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)]))]),
      maskPlaceholder: PropTypes.string,
      onFocus: PropTypes.func,
      onBlur: PropTypes.func,
      onChange: PropTypes.func,
      onMouseDown: PropTypes.func
    };
    module.exports = InputMask;
  }
});

// node_modules/react-input-mask-next/index.js
var require_react_input_mask_next = __commonJS({
  "node_modules/react-input-mask-next/index.js"(exports, module) {
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_input_mask_development();
    }
  }
});
export default require_react_input_mask_next();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=react-input-mask-next.js.map
